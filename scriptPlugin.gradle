import java.nio.file.Files
import java.nio.file.StandardCopyOption
import java.nio.file.Paths

/**
 * This build script contains two tasks. Main functionality is sorting files by their extension.
 *
 * Tasks are grouped into "files" group.
 *
 * Root folder containing files that have to be sorted is parametrized through Gradle properties with the key [tasks.files.folder].
 * Property has to be accessed through the project.ext map as direct reference doesn't work if property key is named with the dot notation.
 */

/**
 * This method sorts files inside specific directory. It does that in the source directory directly and doesn't use
 * build directory. Files are being sorted based on their extension.
 *
 * Files are being resolved with the Project#file() method, as this way we get correct path to the relative path.
 * Only none hidden files are taken into consideration.
 *
 * For every extension new subdirectory is created and file with that extension is moved to matching subdirectory.
 */
tasks.register('sortFiles') {
  group="files"
  description="Sorts files in given directory into subdirectories based on their file extensions"

  doLast { // action that will be executed
    logger.info "==== Sorting Files ===="
    logger.info ""

    // Show this in the example
    // https://stackoverflow.com/questions/37101589/how-to-read-a-properties-files-and-use-the-values-in-project-gradle-script

    file(project.ext['tasks.files.folder'])
            .listFiles({ file -> file.isFile() && !file.isHidden() } as FileFilter)
            .each {

              // Extract name and extension of the file
              def fileName = it.getName()
              def extension = getExtensionOf fileName

              // Create dir of that extension
              mkdir "files/" + extension + "/"

              // Move file to that directory
              Files.move(it.toPath(), Paths.get(files("files/" + extension + "/" + fileName).asPath), StandardCopyOption.REPLACE_EXISTING)
            }

    logger.info ""
    logger.info "======================="
  }
}

/**
 * Is un-sorting the files, which does exactly the opposite of the sortFiles task. It grabs all the files in subdirectories and
 * moves them tot he root directory. Subdirectories are deleted.
 */
task unSortFiles {
  group="files"
  description="Reverts sorting of files; moves all files back to root of the given directory"

  doLast {
    logger.info "==== Un-Sorting Files ===="
    logger.info ""

    def rootFile = file(project.ext['tasks.files.folder'])
    unSortRecursively(rootFile, rootFile.toPath())

    logger.info ""
    logger.info "======================="
  }
}

/**
 * It recursively walks through directories moves files to the root directory and deletes subdirectories.
 * @param directory current directory to be un-sorted
 * @param rootDirectory where the files should be moved
 */
void unSortRecursively(File directory, java.nio.file.Path rootDirectory) {
  directory.listFiles().each {

    // If its file move it back to root directory
    if (it.isFile() && !it.isHidden()) {
      Files.move(it.toPath(), Paths.get(rootDirectory.toString(), it.getName()), StandardCopyOption.REPLACE_EXISTING)
    }

    // Remove directories
    if (it.isDirectory()) {

      // Go through it
      unSortRecursively it, rootDirectory

      // Remove it
      it.delete()
    }
  }
}

/**
 * Get file extension from its file name
 *
 * @param filename from which extension will be extracted
 * @return extension of the file
 */
static String getExtensionOf(String filename) {
  return filename.substring(filename.lastIndexOf(".") + 1)
}